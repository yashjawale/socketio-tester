import React, { useState, useEffect, ChangeEvent } from 'react'
import { io, Socket } from 'socket.io-client'

type Parameter = string | number | boolean | Record<string, any>

const App: React.FC = () => {
  const [serverUrl, setServerUrl] = useState<string>(
    localStorage.getItem('serverUrl') || ''
  )
  const [eventName, setEventName] = useState<string>('')
  const [parameters, setParameters] = useState<Parameter[]>([''])
  const [socket, setSocket] = useState<Socket | null>(null)
  const [connectionStatus, setConnectionStatus] =
    useState<string>('Disconnected')
  const [socketId, setSocketId] = useState<string | null>(null)
  const [output, setOutput] = useState<string[]>([])

  useEffect(() => {
    if (serverUrl) {
      localStorage.setItem('serverUrl', serverUrl)
    }
  }, [serverUrl])

  const connectToServer = () => {
    if (socket) {
      socket.disconnect()
    }
    const newSocket = io(serverUrl)
    newSocket.on('connect', () => {
      setConnectionStatus('Connected')
      setSocketId(newSocket.id || null)
    })
    newSocket.on('disconnect', () => {
      setConnectionStatus('Disconnected')
      setSocketId(null)
    })
    newSocket.onAny((event, ...args) => {
      const newOutput = `Received event "${event}" with args: ${JSON.stringify(
        args
      )}`
      setOutput((prev) => [...prev, newOutput])
    })
    setSocket(newSocket)
  }

  const disconnectFromServer = () => {
    if (socket) {
      socket.disconnect()
      setSocket(null)
      setConnectionStatus('Disconnected')
      setSocketId(null)
    }
  }

  const emitEvent = () => {
    if (!socket) {
      setOutput((prev) => [...prev, 'Error: Not connected to a server.'])
      return
    }
    if (eventName.trim() === '') {
      setOutput((prev) => [...prev, 'Error: Event name cannot be empty.'])
      return
    }
    socket.emit(eventName, ...parameters)
    const log = `Emitted event "${eventName}" with parameters: ${JSON.stringify(
      parameters
    )}`
    setOutput((prev) => [...prev, log])
  }

  const addParameter = () => setParameters([...parameters, ''])

  const updateParameter = (index: number, value: string) => {
    let parsedValue: Parameter = value

    if (value === 'true' || value === 'false') {
      parsedValue = value === 'true' // Boolean
    } else if (!isNaN(Number(value))) {
      parsedValue = Number(value) // Number
    } else {
      try {
        parsedValue = JSON.parse(value) // JSON Object
      } catch {
        parsedValue = value // String fallback
      }
    }

    const updatedParams = [...parameters]
    updatedParams[index] = parsedValue
    setParameters(updatedParams)
  }

  const deleteParameter = (index: number) => {
    setParameters(parameters.filter((_, i) => i !== index))
  }

  return (
    <div>
      <div>
        <div>
          <h1 className="text-xl font-bold">Socket.IO Tester</h1>
          <span>
            Status:{' '}
            <span
              className={`font-semibold ${
                connectionStatus === 'Connected'
                  ? 'text-green-300'
                  : 'text-red-300'
              }`}
            >
              {connectionStatus}
            </span>{' '}
            {socketId && <span>(ID: {socketId})</span>}
          </span>
        </div>
      </div>

      <div>
        {/* Server Connection */}
        <div>
          <label>
            Server URL:
          </label>
          <div className="flex items-center space-x-2">
            <input
              type="text"
              value={serverUrl}
              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                setServerUrl(e.target.value)
              }
              placeholder="Enter server URL"
            />
            <button
              onClick={connectToServer}
              disabled={!serverUrl}
            >
              Connect
            </button>
            <button
              onClick={disconnectFromServer}
              disabled={!socket}
            >
              Disconnect
            </button>
          </div>
        </div>

        <hr/>

        {/* Emit Event */}
        <div>
          <h2>
            Emit Event
          </h2>

          <div>
            <label>
              Event Name:
            </label>
            <input
              type="text"
              value={eventName}
              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                setEventName(e.target.value)
              }
              placeholder="Enter event name"
            />
          </div>

          <div className="mb-4">
            <h3 className="text-lg font-medium text-gray-700 mb-2">
              Parameters
            </h3>
            {parameters.map((param, index) => (
              <div key={index}>
                <input
                  type="text"
                  value={
                    typeof param === 'string' ? param : JSON.stringify(param)
                  }
                  onChange={(e: ChangeEvent<HTMLInputElement>) =>
                    updateParameter(index, e.target.value)
                  }
                  placeholder={`Parameter ${index + 1}`}
                />
                <button
                  onClick={() => deleteParameter(index)}
                >
                  Delete
                </button>
              </div>
            ))}
            <button
              onClick={addParameter}
            >
              Add Parameter
            </button>
          </div>

          <button
            onClick={emitEvent}
            disabled={!eventName}
          >
            Emit
          </button>
        </div>
      </div>

      {/* Output Logs */}
      <div>
        <h2>Logs</h2>
        <div>
          {output.length === 0 ? (
            <p>No logs yet.</p>
          ) : (
            output.map((log, index) => (
              <p key={index}>
                {log}
              </p>
            ))
          )}
        </div>
      </div>
    </div>
  )
}

export default App
